/*
 * This file is part of MIN Test Framework. Copyright Â© 2008 Nokia Corporation
 * and/or its subsidiary(-ies).
 * Contact: Sampo Saaristo
 * Contact e-mail: DG.MIN-Support@nokia.com
 * 
 * This program is free software: you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the Free 
 * Software Foundation, version 2 of the License. 
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General  Public License for
 * more details. You should have received a copy of the GNU General Public 
 * License along with this program. If not,  see 
 * <http://www.gnu.org/licenses/>.
 */


/**
 *  @file       check_logger.tests
 *  @version    0.1
 *  @brief      This file contains implementation of tests for Logger Mechanism
 */

/* ------------------------------------------------------------------------- */

#include <stdlib.h>
#include <check.h>
#include "min_logger.h"

/* ------------------------------------------------------------------------- */
/* EXTERNAL DATA STRUCTURES */
/* None */

/* ------------------------------------------------------------------------- */
/* EXTERNAL GLOBAL VARIABLES */
/* None */

/* ------------------------------------------------------------------------- */
/* EXTERNAL FUNCTION PROTOTYPES */

/* ------------------------------------------------------------------------- */
/* GLOBAL VARIABLES */
/* None */

/* ------------------------------------------------------------------------- */
/* CONSTANTS */
/* None */

/* ------------------------------------------------------------------------- */
/* MACROS */
/* None */

/* ------------------------------------------------------------------------- */
/* LOCAL GLOBAL VARIABLES */
/* None */

/* ------------------------------------------------------------------------- */
/* LOCAL CONSTANTS AND MACROS */
/* None */

/* ------------------------------------------------------------------------- */
/* MODULE DATA STRUCTURES */
/* None */

/* ------------------------------------------------------------------------- */
/* LOCAL FUNCTION PROTOTYPES */
/* None */

/* ------------------------------------------------------------------------- */
/* FORWARD DECLARATIONS */
/* None */

/* ==================== LOCAL FUNCTIONS ==================================== */

START_TEST (test_logger_open)
 {
     int log_open_retval;

     log_open_retval = min_log_open ("min_logger_test", 1);
     fail_unless (log_open_retval == 0, "failed to open log");
     min_log_close();
}
END_TEST

START_TEST (test_logger_open_null_arg)
 {
     int log_open_retval;

     log_open_retval = min_log_open (NULL, 1);
     fail_unless (log_open_retval == 0, "failed to log with NULL");
     min_log_close();
}
END_TEST

START_TEST (test_logger_open_inv_dlevel)
 {
     int log_open_retval;

     log_open_retval = min_log_open ("min_logger_test", 4);
     fail_unless (log_open_retval == 0, "should react to invalid debug level");
     min_log_close();
}
END_TEST

START_TEST (test_logger_close)
 {
     int log_close_retval;

     log_close_retval = min_log_close ();
     fail_unless (log_close_retval == 0, "failed to close log");
}
END_TEST

START_TEST (test_logger_log)
 {
     int log_retval;

     log_retval = min_info ("min test");
     fail_unless (log_retval == 0, "failed to log");
}
END_TEST


START_TEST (test_logger_log_null_arg)
 {
     int log_retval;

     log_retval = min_err (NULL);
     fail_unless (log_retval == 0, "failed to log");
}
END_TEST

START_TEST (test_logger_warn)
 {
     int log_retval;

     log_retval = min_warn ("TEST warning");
     fail_unless (log_retval == 0, "failed to log");
}
END_TEST

START_TEST (test_debug)
 {
     int log_retval = 0;

        log_retval =  min_debug (__FUNCTION__, __LINE__, __FILE__,
     	           "testing debug");

     fail_unless (log_retval == 0, "failed to log");
}
END_TEST

Suite *logger_suite (void)
     {
       Suite *s = suite_create ("logger");

       /* Core test case */
       TCase *tc_core = tcase_create ("Core");
       tcase_add_test (tc_core, test_logger_open);
       tcase_add_test (tc_core, test_logger_open_inv_dlevel);
       tcase_add_test (tc_core, test_logger_open_null_arg);

       tcase_add_test (tc_core, test_logger_close);
       tcase_add_test (tc_core, test_logger_log);
       tcase_add_test (tc_core, test_logger_log_null_arg);
       tcase_add_test (tc_core, test_logger_warn);
       tcase_add_test (tc_core, test_debug);

       suite_add_tcase (s, tc_core);

       return s;
     }


/* ================= OTHER EXPORTED FUNCTIONS ============================== */
/* None */

/* End of file */
