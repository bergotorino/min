# This file is part of MIN Test Framework. Copyright Â© 2008 Nokia Corporation
# and/or its subsidiary(-ies).
# Contact: Konrad Marek Zapalowicz
# Contact e-mail: DG.MIN-Support@nokia.com
# 
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free 
# Software Foundation, version 2 of the License. 
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or 
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General  Public License for
# more details. You should have received a copy of the GNU General Public 
# License along with this program. If not,  see 
# <http://www.gnu.org/licenses/>.

@perl -x createminunitmodule %1 %2 %3 %4 %5 %6 %7 %8 %9 
@goto end

#!perl
use strict;
use File::Find;

# Verify command line parameters
if   ($#ARGV == -1 || $#ARGV > 1 )
{
	PrintHelp();
}

# Take module name
my $moduleName = $ARGV[0];
my $MODULENAME = $moduleName;
$MODULENAME =~ tr/[a-z]/[A-Z]/;

# Take target path or use default
my $targetPath="~";
if ( $#ARGV == 1 )
{
	$targetPath = $ARGV[1];
}


# Create directory
my $targetDir = $targetPath.$moduleName."/";

print "Starting module creation to $targetDir\n";
mkdir $targetDir, 0777 || die ("Can't create directory $targetDir");

# Loop through the file structure
find(\&renamerename, '.');

# chmod build.sh
chmod 0755, $targetDir."/build.sh";

unlink $targetDir."createminunitmodule";
print "Module created to $targetDir\n";


# This function will be called for each file or directory
sub renamerename
{
	my $oldName = $_;
	print "Processing $oldName\n";

	# Construct new filename if that needed
	s/MINUnitXXX/$moduleName/i;
	my $newName = $targetDir.$File::Find::dir."/".$_;  

	# Process directories
	if (opendir(DIR, $oldName))
	{
		closedir (DIR);
		mkdir $newName, 0777 || die ("Can't create directory $newName");
		return;
	}
                        
	# Open input file
	open (INFILE, $oldName ) || die ("Can not find $oldName");

	#Open output file
	my $newOutput = $newName."new";
	open (OUTFILE, ">".$newOutput ) || die ("Can not open $newOutput");

	# Replace text in files
	while (<INFILE>)
	{
	  s/MINUnitXXX/$moduleName/g;
	  s/MINUNITXXX/$MODULENAME/g;
	  s/XXX/$moduleName/g;
	  s/MINUnitTargetDirYYY/$targetDir/g;
	  print OUTFILE $_;
	}

	# Close filehandles
	close (INFILE);
	close (OUTFILE);

	# Rename result file
	rename $newOutput,$newName;
}

sub PrintHelp()
{
	print "CreateMINUnitModule ModuleName [path]\n";
	print "\n";
	print "Creates a new xUnit compilant test module\n";
	print "If [path] is not given, module is created to root of current drive.\n";
	print "If [path] is given, it must contain the final \'\\\' in path name.\n";
	print "Command must be executed in directory where the template exist.\n";
	exit;
}


__END__
:end
