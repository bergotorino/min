#!/usr/bin/perl -w
# This file is part of MIN Test Framework. Copyright Â© 2008 Nokia Corporation
# and/or its subsidiary(-ies).
# Contact: Konrad Marek Zapalowicz
# Contact e-mail: DG.MIN-Support@nokia.com
# 
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free 
# Software Foundation, version 2 of the License. 
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or 
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General  Public License for
# more details. You should have received a copy of the GNU General Public 
# License along with this program. If not,  see 
# <http://www.gnu.org/licenses/>.

use strict;
use Term::ReadLine;

my $path = "/usr/share/min/TestModuleTemplates++/";

my $moduletype = "";
my $modulename = "";
my $modulepath = "";

my $normal = "normal";
my $hardcoded = "hardcoded";
my $testclass = "testclass";
my $minunit = "minunit";
my $luatestclass = "luatestclass";

my $normali = "n";
my $hardcodedi = "h";
my $testclassi = "t";
my $luatestclassi = "l";
my $minuniti = "m";
my $exiti = "e"; 


my $term = new Term::ReadLine 'Simple Perl calc';
my $prompttype = "Enter ModuleType (name/shortcut): ";
my $promptname = "Enter ModuleName (or exit): ";  
my $promptpath = "Enter path [default is home directory ~] (or exit): ";  
my $exit = "exit";  
  
sub PrintHelp();

if ( $#ARGV >= 0 )
{
    $moduletype = $ARGV[0];
    if( $moduletype eq "help" )
    {
        PrintHelp();
    }
}
else
{
    print "Enter ModuleType:\n";
       ;
      
use Term::ANSIColor qw(:constants);
        $Term::ANSIColor::AUTORESET = 1;
        print BOLD UNDERLINE"\t$normali";  print  "ormal = creates an empty test module.\n" ;     
	print BOLD UNDERLINE"\t$hardcodedi"; print"ardcoded = creates test module that uses hardcoded test cases.\n";
	print BOLD UNDERLINE"\t$testclassi"; print "estclass = creates test class which is used with TestScripter.\n";
	print BOLD UNDERLINE"\t$luatestclassi"; print "uatestclass = creates test class which is used with LuaScripter.\n";
	print BOLD UNDERLINE"\t$minuniti"; print "inunit =  creates xUnit compatible test module\n";
	print BOLD UNDERLINE"\t$exiti"; print "xit = Exit.\n";  
    $moduletype = $term->readline($prompttype);
    if( $moduletype eq $exit || $moduletype eq $exiti)
    {
        exit;
    }
}
if( $moduletype ne $normal && $moduletype ne $hardcoded && $moduletype ne $testclass && $moduletype ne $minunit && $moduletype ne $luatestclass &&
$moduletype ne $normali && $moduletype ne $hardcodedi && $moduletype ne $testclassi  && $moduletype ne $minuniti && $moduletype ne $luatestclassi )
    {
        print "\nInvalid module type\n";
        print "See createtestmodule help\n";
        exit;
    }
    
if ( $#ARGV >= 1 )
{
    $modulename = $ARGV[1];
}
else
{
	if( $moduletype eq $normal  || $moduletype eq $normali )
	{   
    		print "$normal module selected.\n";
	}
	elsif( $moduletype eq $hardcoded || $moduletype eq $hardcodedi )
	{
   	 	print "$hardcoded module selected.\n";
	}
	elsif( $moduletype eq $testclass || $moduletype eq $testclassi )
	{
  		print "$testclass module selected.\n";
	}
	elsif( $moduletype eq $luatestclass || $moduletype eq $luatestclassi )
	{
 		print "$luatestclass module selected.\n";
	}
	elsif( $moduletype eq $minunit || $moduletype eq $minuniti)
	{
		print "$minunit module selected.\n";
	}
	
    print "Enter ModuleName which has to be a valid C++ variable name.\n";
    $modulename = $term->readline($promptname);
    if( $modulename eq $exit || $modulename eq $exiti)
    {
        exit;
    }
}
if ( $#ARGV >= 2 )
{
    $modulepath = $ARGV[2];
}
else
{	
    $modulepath = $term->readline($promptpath);
    if( $modulepath eq $exit || $modulepath eq $exiti)
    {
        exit;
    }
}


if ( $modulepath eq "." )
{
    $modulepath= $ENV{'PWD'};
}


if( $modulepath eq "" )
{
    $modulepath= "~/";
}
else
{
    $modulepath.="/";
}

print "Create test module of type $moduletype with name $modulename ";


if ( $modulepath eq "" )
{ 
    print "to current drive root\n";
}
else
{
    print "to $modulepath\n";
}

my @args = ("$modulename", "$modulepath");

if( $moduletype eq $normal || $moduletype eq $normali )
{
    chdir $path."TestModuleXXX";
    system("perl -x createmodule @args");
}

elsif( $moduletype eq $hardcoded || $moduletype eq $hardcodedi)
{
    chdir $path."HardCodedTestModuleXXX";
    system("perl -x createhardcodedmodule @args");
}

elsif( $moduletype eq $testclass || $moduletype eq $testclassi)
{
    chdir $path."TemplateScriptXXX";
    system("perl -x createtestclass @args");
}

elsif( $moduletype eq $minunit || $moduletype eq $minuniti)
{
    chdir $path."MINUnitXXX";
    system("perl -x createminunitmodule @args");
}

elsif( $moduletype eq $luatestclass || $moduletype eq $luatestclassi)
{
    chdir $path."TemplateLuaScriptXXX";
    system("perl -x createluatestclass @args");
}

exit;

sub PrintHelp()
{
	print "CreateTestModule [ModuleType] [ModuleName] [path]\n";
	print "\n";
	print "Creates a new test module\n";
	print "ModuleType defines the type of test module:.\n";
use Term::ANSIColor qw(:constants);
        $Term::ANSIColor::AUTORESET = 1;

	print BOLD UNDERLINE "\t$normali"; print "ormal = creates an empty test module.\n";
	print BOLD UNDERLINE "\t$hardcodedi"; print "ardcoded = creates test module that uses hardcoded test cases.\n";
	print BOLD UNDERLINE "\t$testclassi"; print "estclass = creates test class which is used with TestScripter.\n";
	print BOLD UNDERLINE "\t$luatestclassi"; print "uatestclass = creates test class which is used with LuaScripter.\n";
	print BOLD UNDERLINE "\t$minuniti"; print "tixunit = creates xUnit compatible test module\n";
        print "Module Type can be chosen by entering name or first letter.\n";
	print "If no arguments are given, they are asked from user.\n";
	print "If [path] is given, it must contain the final / in path name.\n";
	exit;
}

__END__
:end
