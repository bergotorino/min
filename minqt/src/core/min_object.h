/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -c MinObject -p min_object /home/user/min_dbus_interface.xml
 *
 * dbusxml2cpp is Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MIN_OBJECT_H_1241765736
#define MIN_OBJECT_H_1241765736

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.maemo.MIN
 */
class MinObject: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.maemo.MIN"; }

public:
    MinObject(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~MinObject();

public Q_SLOTS: // METHODS
    inline QDBusReply<void> min_abort_case(int testrunid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(testrunid);
        return callWithArgumentList(QDBus::Block, QLatin1String("min_abort_case"), argumentList);
    }

    inline QDBusReply<void> min_add_test_case_file(uint moduleid, const QString &testcasefile)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(moduleid) << qVariantFromValue(testcasefile);
        return callWithArgumentList(QDBus::Block, QLatin1String("min_add_test_case_file"), argumentList);
    }

    inline QDBusReply<void> min_add_test_module(const QString &modulepath)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(modulepath);
        return callWithArgumentList(QDBus::Block, QLatin1String("min_add_test_module"), argumentList);
    }

    inline QDBusReply<void> min_close()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("min_close"), argumentList);
    }

    inline QDBusReply<void> min_fatal_error(const QString &what, const QString &errorstring)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(what) << qVariantFromValue(errorstring);
        return callWithArgumentList(QDBus::Block, QLatin1String("min_fatal_error"), argumentList);
    }

    inline QDBusReply<void> min_open()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("min_open"), argumentList);
    }

    inline QDBusReply<void> min_pause_case(int testrunid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(testrunid);
        return callWithArgumentList(QDBus::Block, QLatin1String("min_pause_case"), argumentList);
    }

    inline QDBusReply<void> min_query_test_files()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("min_query_test_files"), argumentList);
    }

    inline QDBusReply<void> min_query_test_modules()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("min_query_test_modules"), argumentList);
    }

    inline QDBusReply<void> min_resume_case(int testrunid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(testrunid);
        return callWithArgumentList(QDBus::Block, QLatin1String("min_resume_case"), argumentList);
    }

    inline QDBusReply<void> min_start_case(uint moduleid, uint caseid, uint groupid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(moduleid) << qVariantFromValue(caseid) << qVariantFromValue(groupid);
        return callWithArgumentList(QDBus::Block, QLatin1String("min_start_case"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void min_case_msg(int testrunid, const QString &message);
    void min_case_paused(int testrunid);
    void min_case_result(int testrunid, int result, const QString &desc, int starttime, int endttime);
    void min_case_resumed(int testrunid);
    void min_case_started(uint moduleid, uint caseid, int testrunid);
    void min_module_ready(uint moduleid);
    void min_new_module(const QString &modulename, uint moduleid);
    void min_new_test_case(uint moduleid, uint caseid, const QString &casetitle);
    void min_no_module(const QString &modulename);
    void min_test_files(const QString &files);
    void min_test_modules(const QString &modules);
};

namespace org {
  namespace maemo {
    typedef ::MinObject MIN;
  }
}
#endif
