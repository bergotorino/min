The purpose of MinItemParser is to parse strings, integers and characters.
The main methods of MinSectionParser are:
@itemize @bullet
@item @code{mip_create}
@item @code{mip_destroy}
@item @code{mip_parse_and_end_pos}
@item @code{mip_get_string}
@item @code{mip_get_next_string}
@item @code{mip_get_next_tagged_string}
@item @code{mip_get_int}
@item @code{mip_get_next_int}
@item @code{mip_get_next_tagged_int}
@item @code{mip_get_uint}
@item @code{mip_get_next_uint}
@item @code{mip_get_next_tagged_uint}
@item @code{mip_get_char}
@item @code{mip_get_next_char}
@item @code{mip_get_next_tagged_char}
@item @code{mip_get_remainder}
@item @code{mip_set_parsing_type}
@item @code{mip_get_parsing_type}
@end itemize

@table @code
@item MinItemParser* mip_create(TPtrC* section, int start_pos, int length)
Creates MinItemParser struct component with given string data.
@table @code
@item TPtrC* section
Pointer to section string data.
@item int start_pos
Start point in given section string by integer value.
@item int length
Length of given section string.
@item @b{Return value}
Pointer to created new MinItemParser struct component.
@end table
@end table

@table @code
@item void mip_destroy(MinItemParser** msp)
Frees allocated memory of MinItemParser struct component.

Returns @code{INITPTR} if destroying operation complete successfully.
@table @code
@item MinItemParser** msp
Pointer to MinItemParser struct component which to be destroyed.
@item @b{Return value}
None
@end table
@end table


@table @code
@item int mip_parse_start_and_end_pos(MinItemParser* mip, TPtrC* start_tag, TPtrC** ref_start_pos, TPtrC** ref_end_pos, TPtrC** ref_extra end_pos)
Parses MinItemParser section and returns results with start, end and extra end positions including length of parsed part of section. 

If start tag keyword is used then method searches string data after this given keyword. If start tag is not used then parsing starts at the beginning of section string.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.
@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item TPtrC* start_tag
A reference to the parsed string.
@item TPtrC** ref_start_pos
Reference pointer start position of parsed section part.
@item TPtrC** ref_end_pos
Reference pointer end position of parsed section part.
@item TPtrC** ref_extra end_pos
Reference pointer extra end position of parsed section. Extra end position is section string location after last quote. 
@item @b{Return value}
@code{ 0} if parsing operation completed successfully

@code{-1} if operation failed.
@end table
@end table

@table @code
@item int mip_get_string(MinItemParser* mip, TPtrC* tag, TPrtC** string)
Gets first string according to tag from MinItemParser section string.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.
@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item TPtrC* tag
Pointer to tag string for searching section part string.
@item TPrtC** string
Reference string pointer for parsed string result.
@item @b{Return value}
@code{ 0} if parsing operation completed successfully

@code{-1} if operation failed.
@end table
@end table


@table @code
@item int mip_get_next_string(MinItemParser* mip, TPtrC** string)
Gets next string according to previous section part string from MinItemParser section string.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.
@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item TPtrC** string
Reference string pointer for parsed result string.
@item @b{Return value}
@code{ 0} if parsing operation completed successfully

@code{-1} if operation failed.
@end table
@end table



@table @code
@item int mip_get_next_tagged_string(MinItemParser* mip, TPtrC* tag, TPtrC** string)
Gets next tagged string according to tag and earlier used MinItemParser section string.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.
@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item TPtrC* tag
Tag string for search of parsing. If tag string is empty then parsing start at the beginning of section string.
@item TPtrC** string
Reference string pointer for parsed result string.
@item @b{Return value}
@code{ 0} if parsing operation completed successfully

@code{-1} if operation failed.
@end table
@end table



@table @code
@item int mip_get_int(MinItemParser* mip, TPtrC* tag, int* value)
Gets first integer value according to tag from MinItemParser section string.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.

@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item TPtrC* tag
Tag string for search of parsing. If tag string is empty then parsing starts the beginning of section string.
@item int* value
Reference string pointer for found integer value by parsing operation.
@item @b{Return value}
@code{ 0} if parsing operation completed successfully

@code{-1} if operation failed.
@end table
@end table



@table @code
@item int mip_get_next_int(MinItemParser* mip, init* value)
Gets next integer value according to tag and earlier used StiItemParser section sting.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.
@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item init* value
Reference string pointer for parsed result string.
@item @b{Return value}
@code{ 0} if parsing operation completed successfully

@code{-1} if operation failed.
@end table
@end table



@table @code
@item int mip_get_next_tagged_int(MinItemParser* mip, TPtrC* tag, int* value)
Gets next tagged integer value according to tag from MinItemParser section string.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.

@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item TPtrC* tag
Tag string for search of parsing.
@item int* value
Reference string pointer for found integer value by parsing operation.
@item @b{Return value}
@code{ 0} if parsing operation completed successfully

@code{-1} if operation failed.
@end table
@end table



@table @code
@item int mip_get_uint(MinItemParser* mip, TPtrC* tag, unsigned int* value)
Gets first unsigned integer value according to tag from MinItemParser section string.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.
@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item TPtrC* tag
Tag string for search of parsing. If tag string is empty then parsing starts at the beginning of section string.
@item unsigned int* value
Reference string pointer for found unsigned integer value by parsing operation.
@item @b{Return value}
@code{ 0} if parsing operation completed successfully

@code{-1} if operation failed.
@end table
@end table



@table @code
@item int mip_get_next_uint(MinItemParser* mip, unsigned int* value)
Gets next unsigned integer value according to previous parsing operation by tag from MinItemParser section string.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.
@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item unsigned int* value
Reference string pointer for found unsigned integer value by parsing operation.
@item @b{Return value}
@code{ 0} if parsing operation completed successfully

@code{-1} if operation failed.
@end table
@end table


@table @code
@item int mip_get_next_tagged_uint(MinItemParser* mip, TPtrC* tag, unsigned int* value)
Gets next tagged unsigned integer value according to previous parsing operation by tag from MinItemParser section string.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.
@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item TPtrC* tag
Tag string for search of next tagged unsigned integer data.
@item unsigned int* value
Reference string pointer for found unsigned integer value by parsing operation.
@item @b{Return value}
@code{ 0} if parsing operation completed successfully

@code{-1} if searching operation failed.
@end table
@end table


@table @code
@item int mip_get_char(MinItemParser* mip, TPtrC* tag, TPtrC** chr)
Gets first character by tag from MinItemParser section string.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.
@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item TPtrC* tag
Tag string for search of next tagged unsigned integer data.
@item TPtrC** chr
Reference string pointer for found character data by parsing operation.
@item @b{Return value}
@code{ 0} if parsing operation completed successfully.

@code{-1} if section string length is zero.

@code{-2} if parsing operation failed by any reason.
@end table
@end table


@table @code
@item int mip_get_next_char(MinItemParser* mip, TPtrC** chr)
Gets next character according to previous parsing operation from MinItemParser section string.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.
@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item TPtrC** chr
Reference string pointer for found character data by parsing operation.
@item @b{Return value}
@code{ 0} if parsing operation completed successfully

@code{-1} if next character searching failed.
@end table
@end table


@table @code
@item int mip_get_next_tagged_char(MinItemParser* mip, TPtrC* tag, TPtrC** chr)
Gets next tagged character by tag from MinItemParser section string.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.
@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item TPtrC* tag
Tag string for search of next tagged unsigned integer data.
@item TPtrC** chr
Reference string pointer for found tagged character data by parsing operation.
@item @b{Return value}
@code{ 0} if parsing operation completed successfully

@code{-1} if next character searching failed.
@end table
@end table


@table @code
@item int mip_get_remainder(MinItemParser* mip, TPtrC** string)
Gets remainder string from MinItemParser section string.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.
@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item TPtrC** string
Reference string pointer for found remainder string by parsing operation.
@item @b{Return value}
@code{ 0} if parsing operation completed successfully

@code{-1} if remainder string parsing failed.
@end table
@end table



@table @code
@item int mip_set_parsing_type(MinItemParser* mip, TParsingType type)
Sets parsing type value for MinItemParser struct component.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when parsing operation failed.
@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item TParsingType type
New parsing type for parsing operations.
@item @b{Return value}
@code{ 0} if parsing operation completed successfully

@code{-1} if MinItemParser struct component not available.
@end table
@end table



@table @code
@item TParsingType mip_get_parsing_type(MinItemParser* mip)
Gets parsing type value from MinItemParser section string.
@table @code
@item @b{Possible errno values}
@code{EINVAL} errno value when MinItemParser struct component not available.
@item MinItemParser* mip
Pointer to MinItemParser struct component.
@item @b{Return value}
Returns parsing type value if parsing operation completed successfully

@code{-1} if operation failed.
@end table
@end table



@b{Note 1}: @code{ENormalParsing} type parsing is takes string after tag keyword and is separated result strings by white spaces. For example, if the section string is @code{"Tag1 Word1 Word2 Tag2 Word3 Word4 Tag3 Word5 Word6"} if is used tag @code{"Tag2"} then parsed result string is @code{"Word3"} by @code{mip_get_string()} method. If after this parsing will did new parsing by @code{mip_get_next_string()} then next parsed result string is @code{"Word4"}.

@b{Note 2}: @code{EQuoteStyleParsing} type parsing takes string inside of two quotes and this parsed may including also white spaces. For example, if only the start tag has been found from the section string then parsing will be returned rest of string after start tag.

@b{Note 3}: If section string including comments strings with two backslashes then parsing will be returned string after the first backslashes.  
