Within MIN, there is a specific MIN Test Module Template Wizard for automatically creating a test module template, for example, a Hardcoded test module, based on the templates.

The test module template type can be hardcoded, normal, testclass or minunit. These test module template types can be seen in figure in @ref{Using MIN for test cases implementation}. In the figure, the test module template types are indicated with cursive font. The figure does not contain detailed information for each test module; for example, the test case files are not shown. In addition to test module templates, the template wizard can be used to create test class templates used by MIN @ref{Using Test Scripter for creating scripted test cases} or Lua @ref{Using LuaScripter for creating scripted test cases} scripter.

MIN Test Module Template Wizard can be launched by running the @code{createtestmodule} script.

MIN Test Module Template Wizard takes the test module template, makes a new copy of it, and changes all the Test Module specific definitions (names) in the code files. MIN Test Module Template Wizard asks from the user the test module template type and name, as well as the path where the new test module template is created.

The test module template type hardcoded creates a test module template where every test case is implemented as a separate function.

The test module template type normal creates an empty test module template where the test cases are implemented under the @code{tm_get_test_cases} and @code{tm_run_test_cases} methods.

The test module template type minunit creates MINUnit type of template.

An example of the test module creation process is shown in Example below
@example
user@@ubuntu:~$ createtestmodule 
Enter ModuleType:
	normal = creates an empty test module.
	hardcoded = creates test module that uses hardcoded test cases.
	testclass = creates test class which is used with TestScripter.
	luatestclass = creates test class which is used with LuaScripter.
	minunit =  creates xUnit compatible test module
	exit = Exit.
Enter ModuleType (name/shortcut): m
minunit module selected.
Enter ModuleName which has to be a valid C variable name.
Enter ModuleName (or exit): minunitexample
Enter path [default is home directory ~] (or exit): 
Create test module of type m with name minunitexample to ~/
Starting module creation to /home/user/minunitexample/
Processing .
Processing Makefile.am.build
Processing createminunitmodule
Processing ChangeLog
Processing NEWS
Processing autogen.sh
Processing build.sh
Processing AUTHORS
Processing README
Processing configure.ac
Processing Makefile.am.dpkg
Processing src
Processing MINUnitXXX.c
Processing MINUnitXXXCases.c
Processing MINUnitXXX.h
Processing data
Processing MINUnitXXX.min.conf
Processing debian
Processing rules
Processing postinst
Processing control
Processing changelog
Processing install
Processing copyright
Processing compat
Processing postrm
Processing prerm
Module created to /home/user/minunitexample/
@end example

An example of compiling the recently created module is shown in below.
@example
maemo@@maemo:/tmp/example_module$ sh build.sh
@end example
The build script defines your test library automatically to @code{min.conf} file (@code{min.conf} path is @code{/home/<user name>/.min/}).
If you now start MIN newly created module should be visible on the console UI.

Another option is create debian package of the test module. This can be achieved by issuing command @code{dpkg-buildpackage -r fakeroot} on the module directory. The created debian package installs the module to @code{/usr/lib/min} and its' configuration file to @code{/etc/min.d}. 
